from django.db import models

# Assuming this is the correct path for your core models
from core.models import DataSource, IngestionJob 

# Define choices for the Insight source
INSIGHT_SOURCE_CHOICES = (
    ('BEDROCK', 'Amazon Bedrock'),
    ('LOOKOUT', 'Amazon Lookout for Metrics'),
    ('FORECAST', 'Amazon Forecast'),
)

class Metric(models.Model):
    data_source = models.ForeignKey(DataSource, on_delete=models.CASCADE, related_name="metrics")
    name = models.CharField(max_length=255)   # e.g., "Daily Sales", "Customer Sentiment Score"
    value = models.FloatField()
    timestamp = models.DateTimeField()
    ingestion_job = models.ForeignKey(IngestionJob, on_delete=models.SET_NULL, null=True, blank=True)
    insight = models.ForeignKey("Insight", on_delete=models.SET_NULL, null=True, blank=True, related_name="metrics")

    def __str__(self):
        return f"{self.name} = {self.value} @ {self.timestamp}"

class Insight(models.Model):
    # --- NEW FIELD FOR AI/ML INTEGRATION ---
    source = models.CharField(
        max_length=50,
        choices=INSIGHT_SOURCE_CHOICES,
        default='BEDROCK',
        help_text="The AWS service that generated this insight."
    )
    # ---------------------------------------
    data_source = models.ForeignKey(DataSource, on_delete=models.CASCADE, related_name="insights")
    title = models.CharField(max_length=255)
    summary = models.TextField()   # LLM narrative explaining the metric
    recommendations = models.JSONField(blank=True, null=True)   # actionable steps (JSONField is good for structured data)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"[{self.source}] Insight for {self.data_source.name} @ {self.created_at}"

class Alert(models.Model):
    insight = models.ForeignKey("Insight", on_delete=models.CASCADE, related_name="alerts")
    ALERT_TYPES = [
        ("EMAIL", "Email"),
        ("SMS", "SMS"),
        ("PUSH", "Push Notification"),
    ]
    type = models.CharField(max_length=20, choices=ALERT_TYPES)
    sent = models.BooleanField(default=False)
    timestamp = models.DateTimeField(auto_now_add=True)
    recipient = models.CharField(max_length=255, blank=True, null=True)  # email or phone
    
    severity = models.IntegerField(default=5, help_text="Severity score, e.g., from 1 (low) to 10 (critical)")
    status = models.CharField(max_length=20, default='PENDING', choices=[('PENDING', 'Pending'), ('SENT', 'Sent'), ('FAILED', 'Failed')])
    details_json = models.JSONField(blank=True, null=True, help_text="Detailed alert metadata.")
    acknowledged_at = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        return f"{self.type} alert for {self.insight.title} sent={self.sent}"


class ForecastPrediction(models.Model):
    """Stores structured time series predictions generated by Amazon Forecast."""
    data_source = models.ForeignKey(
        DataSource, # Removed 'core.' prefix for cleaner referencing if DataSource is imported above
        on_delete=models.CASCADE, 
        related_name="forecasts",
        help_text="The source data this prediction is based on."
    )
    metric_name = models.CharField(
        max_length=255, 
        help_text="The metric being forecasted (e.g., 'Daily Sales')."
    )
    prediction_time = models.DateTimeField(
        help_text="The start time for the predicted period (e.g., today)."
    )
    prediction_data = models.JSONField(
        help_text="A JSON array of predicted values, e.g., [{'date': '2025-10-02', 'value': 1200.50}, ...]"
    )
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = "Forecast Predictions"

    def __str__(self):
        return f"Forecast for {self.metric_name} on {self.data_source.name}"